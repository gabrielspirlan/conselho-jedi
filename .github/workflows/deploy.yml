name: CI/CD Pipeline - Deploy Remoto com SonarQube

on:
  push:
    branches:
      - main

jobs:
  build-and-push:
    name: Build e Push das Imagens Docker
    runs-on: ubuntu-latest
    steps:
      - name: Checkout do código
        uses: actions/checkout@v4

      - name: Configurar QEMU
        uses: docker/setup-qemu-action@v3

      - name: Configurar Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login no Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build e Push da imagem da API
        uses: docker/build-push-action@v5
        with:
          context: ./jedi-api
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/jedi-api:latest

      - name: Build e Push da imagem do Frontend
        uses: docker/build-push-action@v5
        with:
          context: ./jedi-front
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/jedi-front:latest

  sonar-analysis:
    name: Análise de Código com SonarQube
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
      - name: Checkout do código
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configurar JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Iniciar e Verificar SonarQube no servidor
        # CORREÇÃO APLICADA: @master trocado por uma versão estável
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.REMOTE_HOST }}
          username: ${{ secrets.REMOTE_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            docker stop sonar_starwars || true
            docker rm sonar_starwars || true
            
            echo "Iniciando contêiner do SonarQube..."
            docker run -d --name sonar_starwars -p 8117:9000 sonarqube:lts-community
            
            echo "Aguardando o SonarQube iniciar..."
            sleep 100
            docker ps

      - name: Análise do SonarQube para o Backend (API)
        env:
          GITHUB_TOKEN: ${{ secrets.G_TOKEN }}
        run: >
          mvn -f jedi-api/pom.xml verify sonar:sonar

      - name: Download e Configuração do SonarScanner
        run: |
          wget https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-5.0.1.3006-linux.zip
          unzip sonar-scanner-cli-5.0.1.3006-linux.zip
          echo "$GITHUB_WORKSPACE/sonar-scanner-5.0.1.3006-linux/bin" >> $GITHUB_PATH

      - name: Análise do SonarQube para o Frontend (Execução Manual)
        run: |
          sonar-scanner \
            -Dsonar.projectKey=jedi-front \
            -Dsonar.sources=./jedi-front \
            -Dsonar.host.url=http://${{ secrets.REMOTE_HOST }}:8117 \
            -Dsonar.login=admin \
            -Dsonar.password=admin \
            -Dsonar.sourceEncoding=UTF-8
            
      - name: Parar e remover o contêiner do SonarQube
        if: always()
        # CORREÇÃO APLICADA: @master trocado por uma versão estável
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.REMOTE_HOST }}
          username: ${{ secrets.REMOTE_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            echo "Finalizando e removendo contêiner do SonarQube..."
            docker rm --force sonar_starwars || true
            sleep 30

  deploy:
    name: Deploy Remoto via Docker Run
    runs-on: ubuntu-latest
    needs: sonar-analysis
    steps:
      - name: Deploy e Verificação no Servidor Remoto
        # CORREÇÃO APLICADA: @master trocado por uma versão estável
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.REMOTE_HOST }}
          username: ${{ secrets.REMOTE_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            # --- Variáveis de Ambiente ---
            API_IMAGE="${{ secrets.DOCKERHUB_USERNAME }}/jedi-api:latest"
            FRONT_IMAGE="${{ secrets.DOCKERHUB_USERNAME }}/jedi-front:latest"
            DB_IMAGE="postgres:15"
            
            API_CONTAINER="jedi-api"
            FRONT_CONTAINER="jedi-front"
            DB_CONTAINER="postgres_starwars"
            NETWORK_NAME="jedi-network"

            # --- Preparação do Ambiente ---
            docker network create $NETWORK_NAME || true
            echo "Removendo contêineres antigos..."
            docker rm --force $API_CONTAINER || true
            docker rm --force $FRONT_CONTAINER || true
            docker rm --force $DB_CONTAINER || true
            
            echo "Baixando imagens mais recentes..."
            docker pull $API_IMAGE
            docker pull $FRONT_IMAGE
            docker pull $DB_IMAGE
            
            # --- Deploy do Banco de Dados ---
            echo "Iniciando contêiner do PostgreSQL..."
            docker run -d --name $DB_CONTAINER --network $NETWORK_NAME --restart always \
              -e POSTGRES_DB=StarWars \
              -e POSTGRES_USER=postgres \
              -e POSTGRES_PASSWORD=1234 \
              -p 8118:5432 \
              -v postgres_data:/var/lib/postgresql/data \
              $DB_IMAGE
            
            echo "Aguardando o banco de dados iniciar..."
            sleep 15
            
            # --- Deploy da API Backend ---
            echo "Iniciando contêiner da aplicação (API)..."
            docker run -d --name $API_CONTAINER --network $NETWORK_NAME --restart always \
              -p 8119:8108 \
              -e SPRING_DATASOURCE_URL=jdbc:postgresql://postgres_starwars:5432/StarWars \
              -e SPRING_DATASOURCE_USERNAME=postgres \
              -e SPRING_DATASOURCE_PASSWORD=1234 \
              -e SPRING_FLYWAY_BASELINE_ON_MIGRATE=true \
              $API_IMAGE

            # --- Deploy do Frontend ---
            echo "Iniciando contêiner do Frontend..."
            docker run -d --name $FRONT_CONTAINER --network $NETWORK_NAME --restart always \
              -p 8120:80 \
              $FRONT_IMAGE

            # --- Verificação Final ---
            echo "Deploy concluído!"
            echo "Aguardando estabilização dos serviços..."
            sleep 10
            
            echo "-----------------------------------------------------"
            echo "Verificando contêineres em execução no servidor..."
            docker ps
            echo "-----------------------------------------------------"