on:
  push:
    branches:
      - main

jobs:
  build-api:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Build e push API
        uses: docker/build-push-action@v5
        with:
          context: ./jedi-api
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/jedi-api:latest

  build-front:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Build e push Frontend
        uses: docker/build-push-action@v5
        with:
          context: ./jedi-front
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/jedi-front:latest

  sonar-api:
    runs-on: ubuntu-latest
    needs: build-api
    steps:
      - uses: actions/checkout@v4
      - name: Análise Sonar API
        working-directory: ./jedi-api
        run: mvn verify sonar:sonar

  sonar-front:
    runs-on: ubuntu-latest
    needs: build-front
    steps:
      - uses: actions/checkout@v4
      - name: Análise Sonar Frontend
        working-directory: ./jedi-front
        run: npm install && npm run sonar # ou script equivalente

  deploy:
    runs-on: ubuntu-latest
    needs: [sonar-api, sonar-front]
    steps:
      - name: Deploy no servidor remoto via SSH
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.REMOTE_HOST }}
          username: ${{ secrets.REMOTE_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            # Criar rede docker
            docker network create jedi-network || true

            # Parar e remover containers antigos
            docker rm -f jedi-api jedi-front postgres_starwars || true

            # Pull das imagens
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/jedi-api:latest
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/jedi-front:latest
            docker pull postgres:15

            # Rodar banco
            docker run -d --name postgres_starwars --network jedi-network --restart always \
              -e POSTGRES_DB=StarWars -e POSTGRES_USER=postgres -e POSTGRES_PASSWORD=1234 \
              -p 5544:5432 -v postgres_data:/var/lib/postgresql/data postgres:15

            sleep 15

            # Rodar backend
            docker run -d --name jedi-api --network jedi-network --restart always \
              -p 8108:8108 \
              -e SPRING_DATASOURCE_URL=jdbc:postgresql://postgres_starwars:5432/StarWars \
              -e SPRING_DATASOURCE_USERNAME=postgres \
              -e SPRING_DATASOURCE_PASSWORD=1234 \
              -e SPRING_FLYWAY_BASELINE_ON_MIGRATE=true \
              ${{ secrets.DOCKERHUB_USERNAME }}/jedi-api:latest

            # Rodar frontend
            docker run -d --name jedi-front --network jedi-network --restart always \
              -p 3000:3000 \  # ou porta que o frontend usar
              ${{ secrets.DOCKERHUB_USERNAME }}/jedi-front:latest

            echo "Deploy finalizado!"
