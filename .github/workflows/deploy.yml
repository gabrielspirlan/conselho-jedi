name: CI/CD Pipeline - Deploy Remoto com SonarQube

on:
  push:
    branches:
      - main

jobs:
  build-and-push:
    name: Build e Push da Imagem Docker
    runs-on: ubuntu-latest
    steps:
      - name: Checkout do código
        uses: actions/checkout@v4
      - name: Configurar QEMU
        uses: docker/setup-qemu-action@v3
      - name: Configurar Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login no Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build e Push da imagem
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/jedi-api:latest

  sonar-analysis:
    name: Análise de Código com SonarQube
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
      - name: Checkout do código
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Configurar JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Iniciar e Verificar SonarQube no servidor
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.REMOTE_HOST }}
          username: ${{ secrets.REMOTE_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            docker stop sonar_starwars || true
            docker rm sonar_starwars || true
            
            echo "Iniciando contêiner do SonarQube..."
            # ATENÇÃO: Verifique se esta porta (ex: 8081) é a mesma do seu pom.xml e firewall
            docker run -d --name sonar_starwars -p 8081:9000 \
              -e SONAR_ES_JAVA_OPTS="-Xmx1g -Xms1g" \
              -e SONAR_WEB_JAVA_OPTS="-Xmx1g -Xms512m" \
              sonarqube:lts-community
            
            echo "Aguardando SonarQube ficar operacional (timeout de 2 minutos)..."
            for i in {1..24}; do
              # Usa curl para checar o status da API de saúde do SonarQube
              STATUS=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8081/api/system/health)
              if [ "$STATUS" -eq 200 ]; then
                echo "SonarQube está operacional! (Status: $STATUS)"
                break
              else
                echo "Aguardando SonarQube... (Status: $STATUS). Tentativa $i de 24."
                sleep 5
              fi
              if [ "$i" -eq 24 ]; then
                echo "Erro: SonarQube não ficou operacional após 2 minutos."
                docker logs sonar_starwars
                exit 1
              fi
            done

      - name: Análise do SonarQube com Maven
        env:
          GITHUB_TOKEN: ${{ secrets.G_TOKEN }}
        run: >
          mvn verify sonar:sonar
          -Dsonar.qualitygate.wait=true
          -Dsonar.login=admin
          -Dsonar.password=admin

      - name: Parar e remover o contêiner do SonarQube
        if: always()
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.REMOTE_HOST }}
          username: ${{ secrets.REMOTE_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            echo "Finalizando e removendo contêiner do SonarQube..."
            docker stop sonar_starwars || true
            docker rm sonar_starwars || true

  deploy:
    name: Deploy Remoto via Docker Run
    runs-on: ubuntu-latest
    needs: sonar-analysis
    steps:
      - name: Deploy e Verificação no Servidor Remoto
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.REMOTE_HOST }}
          username: ${{ secrets.REMOTE_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            APP_IMAGE="gabrielspirlan/jedi-api:latest"
            DB_CONTAINER="postgres_starwars"
            APP_CONTAINER="jedi-api"
            NETWORK_NAME="jedi-network"
            
            docker network create $NETWORK_NAME || true
            echo "Removendo contêineres antigos..."
            docker stop $APP_CONTAINER || true
            docker rm $APP_CONTAINER || true
            docker stop $DB_CONTAINER || true
            docker rm $DB_CONTAINER || true
            echo "Baixando imagens mais recentes..."
            docker pull $APP_IMAGE
            docker pull postgres:15
            
            echo "Iniciando contêiner do PostgreSQL..."
            docker run -d --name $DB_CONTAINER --network $NETWORK_NAME --restart always -e POSTGRES_DB=StarWars -e POSTGRES_USER=postgres -e POSTGRES_PASSWORD=1234 -p 5544:5432 -v postgres_data:/var/lib/postgresql/data postgres:15
            
            echo "Aguardando o banco de dados iniciar..."
            sleep 15
            
            echo "Iniciando contêiner da aplicação..."
            docker run -d --name $APP_CONTAINER --network $NETWORK_NAME --restart always -p 8108:8108 -e SPRING_DATASOURCE_URL=jdbc:postgresql://postgres_starwars:5432/StarWars -e SPRING_DATASOURCE_USERNAME=postgres -e SPRING_DATASOURCE_PASSWORD=1234 -e SPRING_FLYWAY_BASELINE_ON_MIGRATE=true $APP_IMAGE
            
            echo "Deploy concluído!"
            echo "Aguardando 3 minutos para estabilização dos serviços..."
            sleep 180
            
            echo "-----------------------------------------------------"
            echo "Verificando contêineres em execução no servidor..."
            docker ps
            echo "-----------------------------------------------------"