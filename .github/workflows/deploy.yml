name: CI/CD Pipeline - Deploy Remoto

on:
  push:
    branches:
      - main

jobs:
  build-and-push:
    name: Build e Push da Imagem Docker
    runs-on: ubuntu-latest
    steps:
      - name: Checkout do código
        uses: actions/checkout@v4

      - name: Configurar QEMU
        uses: docker/setup-qemu-action@v3

      - name: Configurar Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login no Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build e Push da imagem
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/jedi-api:latest # Nome da imagem fixo para consistência

  deploy:
    name: Deploy Remoto com Docker Compose
    runs-on: ubuntu-latest
    needs: build-and-push # Agora depende diretamente do build
    steps:
      - name: Deploy e Verificação no Servidor Remoto
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.REMOTE_HOST }}
          username: ${{ secrets.REMOTE_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            # Define o nome da imagem e do arquivo compose
            IMAGE_NAME=${{ secrets.DOCKERHUB_USERNAME }}/jedi-api:latest
            COMPOSE_FILE_PATH=./docker-compose-deploy.yml

            # Cria o arquivo docker-compose.yml no servidor
            echo "Criando arquivo de deploy $COMPOSE_FILE_PATH"
            cat << EOF > $COMPOSE_FILE_PATH
            version: '3.8'

            services:
              postgres:
                image: postgres:15
                container_name: postgres_db
                restart: always
                environment:
                  POSTGRES_DB: StarWars
                  POSTGRES_USER: postgres
                  POSTGRES_PASSWORD: 1234
                ports:
                  - "5544:5432"
                volumes:
                  - postgres_data:/var/lib/postgresql/data

              app:
                image: \$IMAGE_NAME
                container_name: jedi-api
                depends_on:
                  - postgres
                ports:
                  - "8108:8108"
                environment:
                  SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/StarWars
                  SPRING_DATASOURCE_USERNAME: postgres
                  SPRING_DATASOURCE_PASSWORD: 1234
                  SPRING_FLYWAY_BASELINE_ON_MIGRATE: true
                restart: always

            volumes:
              postgres_data:
            EOF

            # Puxa a imagem mais recente e recria os contêineres
            echo "Iniciando deploy com docker-compose..."
            docker-compose -f \$COMPOSE_FILE_PATH pull app
            docker-compose -f \$COMPOSE_FILE_PATH up -d --force-recreate

            echo "Deploy concluído! Aplicação acessível em http://\${{ secrets.REMOTE_HOST }}:8108"

            # --- ETAPA DE VERIFICAÇÃO ADICIONADA ---
            echo "-----------------------------------------------------"
            echo "Verificando containers em execução no servidor..."
            docker ps
            echo "-----------------------------------------------------"