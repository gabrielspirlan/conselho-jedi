name: CI/CD Pipeline - Java com SonarQube e Deploy Remoto

on:
  push:
    branches:
      - main

jobs:
  build-and-push:
    name: Build e Push da Imagem Docker
    runs-on: ubuntu-latest
    steps:
      - name: Checkout do código
        uses: actions/checkout@v4

      - name: Configurar QEMU
        uses: docker/setup-qemu-action@v3

      - name: Configurar Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login no Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build e Push da imagem
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/${{ github.event.repository.name }}:latest

  sonar-analysis:
    name: Análise de Código com SonarQube
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
      - name: Checkout do código
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configurar JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Iniciar SonarQube no servidor remoto
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.REMOTE_HOST }}
          username: ${{ secrets.REMOTE_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            docker run -d --name sonarqube -p 9000:9000 -p 9092:9092 sonarqube:community
            sleep 30

      - name: Cache do SonarQube e do Maven
        uses: actions/cache@v3
        with:
          path: |
            ~/.sonar/cache
            ~/.m2/repository
          key: ${{ runner.os }}-sonar-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-sonar-maven-

      - name: Análise do SonarQube com Maven
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: mvn verify sonar:sonar -Dsonar.qualitygate.wait=true

      - name: Finalizar e remover SonarQube no servidor remoto
        if: always()
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.REMOTE_HOST }}
          username: ${{ secrets.REMOTE_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            docker stop sonarqube
            docker rm sonarqube

  deploy:
    name: Deploy Remoto com Docker Compose
    runs-on: ubuntu-latest
    needs: sonar-analysis
    steps:
      - name: Deploy no Servidor Remoto
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.REMOTE_HOST }}
          username: ${{ secrets.REMOTE_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            # Define as variáveis de imagem e nome do arquivo compose
            IMAGE_NAME=${{ secrets.DOCKERHUB_USERNAME }}/${{ github.event.repository.name }}:latest
            COMPOSE_FILE_PATH=./docker-compose-deploy.yml

            # Puxa a imagem mais recente da aplicação para garantir que está atualizada
            echo "Fazendo pull da imagem da aplicação: $IMAGE_NAME"
            docker pull $IMAGE_NAME

            # Cria o arquivo docker-compose.yml no servidor para o deploy
            # A diretiva 'build: .' é substituída por 'image: $IMAGE_NAME'
            echo "Criando arquivo de deploy $COMPOSE_FILE_PATH"
            cat << EOF > $COMPOSE_FILE_PATH
            version: '3.8'
            
            services:
              postgres:
                image: postgres:15
                container_name: postgres_db
                restart: always
                environment:
                  POSTGRES_DB: StarWars
                  POSTGRES_USER: postgres
                  POSTGRES_PASSWORD: 1234
                ports:
                  - "5544:5432"
                volumes:
                  - postgres_data:/var/lib/postgresql/data
            
              app:
                image: $IMAGE_NAME
                container_name: jedi-api
                depends_on:
                  - postgres
                ports:
                  - "8108:8108"
                environment:
                  SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/StarWars
                  SPRING_DATASOURCE_USERNAME: postgres
                  SPRING_DATASOURCE_PASSWORD: 1234
                  SPRING_FLYWAY_BASELINE_ON_MIGRATE: true
                restart: always
            
            volumes:
              postgres_data:
            EOF

            echo "Iniciando serviços via docker-compose..."
            docker-compose -f $COMPOSE_FILE_PATH up -d --force-recreate
            
            echo "Deploy concluído! Aplicação acessível em http://${{ secrets.REMOTE_HOST }}:8108"